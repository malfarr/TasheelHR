<?php

/**
 * Implements hook_module_implements_alter().
 */
function ctools_automodal_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter') {
    // Try to ensure that ctools_automodal_menu_alter() gets invoked last.
    $group = $implementations['ctools_automodal'];
    unset($implementations['ctools_automodal']);
    $implementations['ctools_automodal'] = $group;
  }
}

/**
 * Implements hook_menu_alter().
 */
function ctools_automodal_menu_alter(&$items) {
  $modal_paths = array();

  foreach ($items as $path => $item) {
    if (!empty($item['modal']) && strpos($path, '%ctools_js') === FALSE) {
      if ($item['page callback'] == 'drupal_get_form') {
        $items["$path/%ctools_js"] = $item;
        $items["$path/%ctools_js"]['page callback'] = 'ctools_automodal_get_form';
        $items["$path/%ctools_js"]['page arguments'][] = substr_count($path, '/') + 1;
        $items["$path/%ctools_js"]['type'] = MENU_CALLBACK;
      }
      else {
        $items["$path/%ctools_js"] = $item + array('page arguments' => array());
        $items["$path/%ctools_js"]['page callback'] = 'ctools_automodal_get_page';
        array_unshift($items["$path/%ctools_js"]['page arguments'], $item['page callback']);
        $items["$path/%ctools_js"]['page arguments'][] = substr_count($path, '/') + 1;
        $items["$path/%ctools_js"]['type'] = MENU_CALLBACK;
      }
      $modal_paths[] = preg_replace('/%[^\/]+/', '*', $path);
    }
  }

  variable_set('ctools_automodal_paths', $modal_paths);
}

/**
 * Implements hook_page_delivery_callback_alter()
 */
function ctools_automodal_page_delivery_callback_alter(&$callback) {
  // jQuery sets a HTTP_X_REQUESTED_WITH header of 'XMLHttpRequest'.
  // If a page would normally be delivered as an html page, and it is called
  // from jQuery, deliver it instead as an Ajax response.
  if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest' && $callback == 'drupal_deliver_html_page') {
    $path = ctools_automodal_get_system_uri();
    if (ctools_automodal_is_path_modal($path)) {
      $page_callback_result = ctools_automodal_get_page_callback_error($path);
      if (is_int($page_callback_result)) {
        ctools_automodal_deliver_error($path, $page_callback_result);
      }
    }
    else {
      $callback = 'ajax_deliver';
    }
  }
}

/**
 * Returns URI of the request with stripped "nojs" or "ajax".
 *
 * @return string
 */
function ctools_automodal_get_system_uri() {
  $path = drupal_parse_url(trim(request_uri(), '/'));
  $path_parts = explode('/', $path['path']);
  if (in_array(end($path_parts), array('nojs', 'ajax'))) {
    array_pop($path_parts);
    $path = implode('/', $path_parts);
  }
  return $path;
}

/**
 * Check the menu path for access denied and not found errors.
 *
 * Returns MENU_NOT_FOUND, MENU_ACCESS_DENIED or NULL if no error was found.
 *
 * @param $path
 * @return int|null
 */
function ctools_automodal_get_page_callback_error($path) {
  $page_callback_result = NULL;
  if ($router_item = menu_get_item($path)) {
    if ($router_item['access'] == FALSE) {
      $page_callback_result = MENU_ACCESS_DENIED;
    }
  }
  else {
    $page_callback_result = MENU_NOT_FOUND;
  }
  return $page_callback_result;
}

/**
 * Package and send the result of a page callback to the browser as HTML.
 *
 * @param $page_callback_result
 *   The result of a page callback. Can be one of:
 *   - NULL: to indicate no content.
 *   - An integer menu status constant: to indicate an error condition.
 *   - A string of HTML content.
 *   - A renderable array of content.
 *
 * @see drupal_deliver_page()
 * @see drupal_deliver_html_page()
 */
function ctools_automodal_deliver_error($path, $page_callback_result) {
  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    $output = '';
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        // Print a 404 page.
        // FIXME?: Returning 404 will show the ajax error.
        //drupal_add_http_header('Status', '404 Not Found');
        watchdog('page not found', check_plain($path), array(), WATCHDOG_WARNING);

        // Standard 404 handler.
        drupal_set_title(t('Page not found'));
        $output = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
        break;

      case MENU_ACCESS_DENIED:
        // Print a 403 page.
        // FIXME?: Returning 403 will show the ajax error.
        //drupal_add_http_header('Status', '403 Forbidden');
        watchdog('access denied', check_plain($path), array(), WATCHDOG_WARNING);

        // Standard 403 handler.
        drupal_set_title(t('Access denied'));
        $output = t('You are not authorized to access this page.');
        break;

      case MENU_SITE_OFFLINE:
        // Print a 503 page.
        // FIXME?: Returning 503 will show the ajax error.
        //drupal_add_http_header('Status', '503 Service unavailable');

        drupal_set_title(t('Site maintenance'));
        $output = theme('maintenance_page', array('content' => filter_xss_admin(variable_get('maintenance_mode_message',
          t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => variable_get('site_name', 'Drupal')))))));
        break;
    }

    // If there is any error output render it and exit.
    if ($output) {
      ctools_include('modal');
      ctools_include('ajax');
      ctools_add_js('ajax-responder');

      $commands = ctools_automodal_page_render($output);
      drupal_alter('modal_error', $commands, $path, $page_callback_result);

      print ajax_render($commands);
      exit();
    }
  }
}

/**
 * Check if an internal Drupal path should be converted to a modal link.
 */
function ctools_automodal_is_path_modal($path) {
  static $modal_paths_regex;

  if (!isset($modal_paths_regex)) {
    $modal_paths = variable_get('ctools_automodal_paths', array());
    foreach ($modal_paths as &$modal_path) {
      $modal_path = preg_quote($modal_path, '/');
      $modal_path = str_replace('\*', '.*', $modal_path);
    }
    $modal_paths_regex = '/^(' . implode('|', $modal_paths) . ')$/';
  }
 
  //custom hack 
  if(is_array($path)){
    if(isset($path['path'])){
      $path = $path['path'];
    }else{
      return FALSE;
    }
  }
  
  return (bool) preg_match($modal_paths_regex, $path);
}

/**
 * Implements hook_preprocess_link().
 */
function ctools_automodal_preprocess_link(&$variables) {
  static $ctools_modal_included = FALSE;

  if (ctools_automodal_is_path_modal($variables['path'])) {
    $item = menu_get_item($variables['path']);

    // Only process the modal includes once per request.
    if (!$ctools_modal_included) {
      ctools_include('modal');
      ctools_modal_add_js();
      $ctools_modal_included = TRUE;
    }

    $variables['options']['attributes']['class'][] = 'ctools-use-modal';

    if (strpos($variables['path'], 'nojs') === FALSE) {
      $variables['path'] .= '/nojs';
    }
  }
}

/**
 * Implements hook_preprocess_menu_local_action().
 */
function ctools_automodal_preprocess_menu_local_action(&$variables) {
  // Prepare the link array in the way that the hook_preprocess_link() expects.
  $link = array(
    'path' => &$variables['element']['#link']['href'],
    'options' => &$variables['element']['#link']['localized_options'],
    'text' => &$variables['element']['#link']['title'],
  );
  ctools_automodal_preprocess_link($link);
}

/**
 * Dirty, dirty function to fix the 'current path' global on modal pages.
 */
function ctools_automodal_fix_get_q() {
  $path = current_path();
  // Pop off the /js or /nojs suffix to the path.
  $path = substr($path, 0, strrpos($path, '/'));
  // @todo Shower multiple times after modifing global variables.
  $_GET['q'] = $path;
}

/**
 * Display a Drupal form using CTools modal or normal page display.
 */
function ctools_automodal_get_form() {
  $args = func_get_args();
  $form_id = array_shift($args);
  $js = $ajax = array_pop($args);

  ctools_automodal_fix_get_q();

  if ($ajax) {
    ctools_include('modal');
    ctools_include('ajax');

    $form_state = array(
      'ajax' => $ajax,
      'build_info' => array('args' => $args),
    );
    $commands = ctools_modal_form_wrapper($form_id, $form_state);

    if (empty($commands)) {
      $commands[] = ctools_modal_command_loading();
      if (!empty($_GET['destination'])) {
        $commands[] = ctools_ajax_command_redirect($_GET['destination']);
      }
    }
    print ajax_render($commands);
    exit();
  }
  else {
    array_unshift($args, $form_id);
    return call_user_func_array('drupal_get_form', $args);
  }
}

/**
 * Display a normal Drupal page using CTools modal.
 */
function ctools_automodal_get_page() {
  $args = func_get_args();
  $callback = array_shift($args);
  $ajax = array_pop($args);

  ctools_automodal_fix_get_q();

  if (function_exists($callback)) {
    $output = call_user_func_array($callback, $args);

    if ($ajax) {
      ctools_include('modal');
      ctools_include('ajax');
      $commands = ctools_automodal_page_render($output);

      if (empty($commands)) {
        $commands[] = ctools_modal_command_loading();
        if (!empty($_GET['destination'])) {
          $commands[] = ctools_ajax_command_redirect($_GET['destination']);
        }
      }

      print ajax_render($commands);
      exit();
    }
    else {
      return $output;
    }
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Render a page into an AJAX display.
 */
function ctools_automodal_page_render($output) {
  if (is_array($output)) {
    $output = drupal_render($output);
  }

  $title = drupal_get_title();

  // If there are messages for the form, render them.
  if ($messages = theme('status_messages')) {
    $output = '<div class="messages">' . $messages . '</div>' . $output;
  }

  $commands = array();
  $commands[] = ctools_modal_command_display($title, $output);
  return $commands;
}
